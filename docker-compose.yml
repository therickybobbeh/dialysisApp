version: '3.8'

services:
  backend:
    build:
      context: .  
      dockerfile: Dockerfile
    ports:
      - "8004:8004"  
    env_file:
      - .env  
    environment:
      POSTGRES_HOST: db  # Ensure database hostname is set correctly
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    depends_on:
      db:
        condition: service_healthy  
    networks:
      - app_network

  frontend:
    build:
      context: ./frontend  
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    env_file:
      - .env  
    depends_on:
      - backend
    networks:
      - app_network

  angular-frontend:
    build:
      context: ./dialysis-app-ui
      dockerfile: Dockerfile
    ports:
      - "4200:80"
    env_file:
      - .env
    networks:
      - app_network

  db:
    image: postgres:14
    restart: always
    env_file:
      - .env  
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./pd_management.sql:/docker-entrypoint-initdb.d/pd_management.sql  # Mount SQL dump file
    ports:
      - "5432:5432"
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      retries: 5
      timeout: 5s
  hapi:
    image: hapiproject/hapi
    container_name: hapi_server
    ports:
      - "8080:8080"
    environment:
      - HAPI_FHIR_JPA_SERVER=HAPI_JPA_SERVER
    volumes:
      - ./data:/hapi_fhir/data
    restart: always

volumes:
  db-data:

networks:
  app_network:

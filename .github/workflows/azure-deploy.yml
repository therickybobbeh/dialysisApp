name: Build and Deploy to Azure

on:
  push:
    branches: [ main, development ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - prod

# Add permissions block for OIDC authentication
permissions:
  id-token: write
  contents: read

env:
  # Environment Variables
  AZURE_RESOURCE_GROUP: pd-management-${{ github.event.inputs.environment || 'dev' }}
  AZURE_LOCATION: eastus2  # Using eastus2 to match existing resources
  ENVIRONMENT: ${{ github.event.inputs.environment || 'dev' }}
  FRONTEND_APP_NAME: pd-management-frontend
  BACKEND_APP_NAME: pd-management-backend
  # Add the existing database server name
  POSTGRES_SERVER_NAME: pdmanagementdevdb
  USE_EXISTING_DB: true  # Flag to indicate we should use existing DB
  USE_EXISTING_LOG_ANALYTICS: true  # Flag to indicate we should use existing Log Analytics workspace

jobs:
  build-and-test:
    # Existing build and test job remains unchanged
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          pip install -r requirements.txt
          
      - name: Run backend tests
        run: |
          # Disabled for now - add real tests later
          # cd backend
          # pytest
          echo "Tests skipped for now"
          
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'
          
      - name: Install frontend dependencies 
        run: |
          cd dialysis-app-ui
          npm ci
          
      - name: Build frontend
        run: |
          cd dialysis-app-ui
          npm run build -- --configuration production
          
      - name: Run frontend tests
        run: |
          cd dialysis-app-ui
          # npm run test
          echo "Tests skipped for now"

  deploy-infrastructure:
    needs: build-and-test
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    outputs:
      acrLoginServer: ${{ steps.deploy-infra.outputs.acrLoginServer }}
      acrName: ${{ steps.get-acr.outputs.acrName }}
      backendUrl: ${{ steps.deploy-infra.outputs.backendUrl }}
      frontendUrl: ${{ steps.deploy-infra.outputs.frontendUrl }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Azure login
        uses: azure/login@v1
        with:
          # We're using modern OIDC authentication
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          
      - name: Create resource group if not exists
        uses: azure/CLI@v1
        with:
          inlineScript: |
            if [ $(az group exists --name ${{ env.AZURE_RESOURCE_GROUP }}) = false ]; then
              echo "Resource group does not exist. Creating..."
              az group create --name ${{ env.AZURE_RESOURCE_GROUP }} --location ${{ env.AZURE_LOCATION }}
            else
              echo "Resource group already exists."
            fi
      
      - name: Validate Bicep deployment
        uses: azure/CLI@v1
        with:
          inlineScript: |
            # Preview the deployment to catch any issues before deploying
            az deployment group what-if \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --template-file infra/main.bicep \
              --parameters environmentName=${{ env.ENVIRONMENT }} \
                          location=${{ env.AZURE_LOCATION }} \
                          postgresAdminLogin=${{ secrets.POSTGRES_ADMIN_USER }} \
                          postgresAdminPassword=${{ secrets.POSTGRES_ADMIN_PASSWORD }} \
                          useInitialPlaceholderImages=true
            
      - name: Deploy infrastructure with Bicep
        uses: azure/CLI@v1
        id: deploy-infra
        with:
          inlineScript: |
            echo "Deploying infrastructure with Bicep..."
            # Execute the deployment and save output to a JSON file to avoid shell parsing issues
            az deployment group create \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --template-file infra/main.bicep \
              --parameters environmentName=${{ env.ENVIRONMENT }} \
              --parameters location=${{ env.AZURE_LOCATION }} \
              --parameters postgresAdminLogin="${{ secrets.POSTGRES_ADMIN_USER }}" \
              --parameters postgresAdminPassword="${{ secrets.POSTGRES_ADMIN_PASSWORD }}" \
              --parameters useInitialPlaceholderImages=true \
              --output json > deployment-output.json
            
            # Extract important outputs using jq from the file instead of directly from command output
            ACR_LOGIN_SERVER=$(jq -r '.properties.outputs.acrLoginServer.value' deployment-output.json)
            BACKEND_URL=$(jq -r '.properties.outputs.backendUrl.value' deployment-output.json)
            FRONTEND_URL=$(jq -r '.properties.outputs.frontendUrl.value' deployment-output.json)
            HAPI_FHIR_URL=$(jq -r '.properties.outputs.hapiFhirUrl.value' deployment-output.json || echo "")
            
            echo "acrLoginServer=$ACR_LOGIN_SERVER" >> $GITHUB_OUTPUT
            echo "backendUrl=$BACKEND_URL" >> $GITHUB_OUTPUT
            echo "frontendUrl=$FRONTEND_URL" >> $GITHUB_OUTPUT
            echo "hapiFhirUrl=$HAPI_FHIR_URL" >> $GITHUB_OUTPUT
            
            # Also set as environment variables for this job
            echo "ACR_LOGIN_SERVER=$ACR_LOGIN_SERVER" >> $GITHUB_ENV
            echo "BACKEND_URL=$BACKEND_URL" >> $GITHUB_ENV
            echo "FRONTEND_URL=$FRONTEND_URL" >> $GITHUB_ENV
            echo "HAPI_FHIR_URL=$HAPI_FHIR_URL" >> $GITHUB_ENV
      
      - name: Wait for deployment to complete
        uses: azure/CLI@v1
        with:
          inlineScript: |
            # Wait for the deployment to complete before proceeding
            az deployment group wait \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --name main \
              --created
            
      - name: Get ACR name
        uses: azure/CLI@v1
        id: get-acr
        with:
          inlineScript: |
            # Get ACR name from the deployment output
            ACR_NAME=${ACR_LOGIN_SERVER/.azurecr.io/}
            echo "ACR_NAME=$ACR_NAME" >> $GITHUB_ENV
            echo "acrName=$ACR_NAME" >> $GITHUB_OUTPUT
            
  build-and-push-images:
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Azure login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: Get ACR credentials
        id: get-acr-credentials
        uses: azure/CLI@v1
        with:
          inlineScript: |
            ACR_NAME=${{ needs.deploy-infrastructure.outputs.acrName }}
            ACR_USERNAME=$(az acr credential show --name $ACR_NAME --query username -o tsv)
            ACR_PASSWORD=$(az acr credential show --name $ACR_NAME --query passwords[0].value -o tsv)
            echo "ACR_USERNAME=$ACR_USERNAME" >> $GITHUB_OUTPUT
            echo "ACR_PASSWORD=$ACR_PASSWORD" >> $GITHUB_OUTPUT
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Azure Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ needs.deploy-infrastructure.outputs.acrLoginServer }}
          username: ${{ steps.get-acr-credentials.outputs.ACR_USERNAME }}
          password: ${{ steps.get-acr-credentials.outputs.ACR_PASSWORD }}
      
      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./backend/Dockerfile
          push: true
          tags: ${{ needs.deploy-infrastructure.outputs.acrLoginServer }}/${{ env.BACKEND_APP_NAME }}:${{ github.sha }},${{ needs.deploy-infrastructure.outputs.acrLoginServer }}/${{ env.BACKEND_APP_NAME }}:latest
          cache-from: type=registry,ref=${{ needs.deploy-infrastructure.outputs.acrLoginServer }}/${{ env.BACKEND_APP_NAME }}:cache
          cache-to: type=registry,ref=${{ needs.deploy-infrastructure.outputs.acrLoginServer }}/${{ env.BACKEND_APP_NAME }}:cache,mode=max
      
      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./dialysis-app-ui
          file: ./dialysis-app-ui/Dockerfile
          push: true
          tags: ${{ needs.deploy-infrastructure.outputs.acrLoginServer }}/${{ env.FRONTEND_APP_NAME }}:${{ github.sha }},${{ needs.deploy-infrastructure.outputs.acrLoginServer }}/${{ env.FRONTEND_APP_NAME }}:latest
          cache-from: type=registry,ref=${{ needs.deploy-infrastructure.outputs.acrLoginServer }}/${{ env.FRONTEND_APP_NAME }}:cache
          cache-to: type=registry,ref=${{ needs.deploy-infrastructure.outputs.acrLoginServer }}/${{ env.FRONTEND_APP_NAME }}:cache,mode=max

  update-container-apps:
    needs: [deploy-infrastructure, build-and-push-images]
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Azure login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: Update Container Apps to use custom images
        uses: azure/CLI@v1
        with:
          inlineScript: |
            # Now update the container apps to use our real images instead of the placeholder
            az deployment group create \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --template-file infra/main.bicep \
              --parameters environmentName=${{ env.ENVIRONMENT }} \
              --parameters location=${{ env.AZURE_LOCATION }} \
              --parameters postgresAdminLogin="${{ secrets.POSTGRES_ADMIN_USER }}" \
              --parameters postgresAdminPassword="${{ secrets.POSTGRES_ADMIN_PASSWORD }}" \
              --parameters useInitialPlaceholderImages=false \
              --output json > update-output.json
            
            # Extract URLs in case they changed
            BACKEND_URL=$(jq -r '.properties.outputs.backendUrl.value' update-output.json)
            FRONTEND_URL=$(jq -r '.properties.outputs.frontendUrl.value' update-output.json)
            HAPI_FHIR_URL=$(jq -r '.properties.outputs.hapiFhirUrl.value' update-output.json || echo "")
            
            # Set for the final output step
            echo "BACKEND_URL=$BACKEND_URL" >> $GITHUB_ENV
            echo "FRONTEND_URL=$FRONTEND_URL" >> $GITHUB_ENV
            echo "HAPI_FHIR_URL=$HAPI_FHIR_URL" >> $GITHUB_ENV
      
      - name: Output application URLs
        uses: azure/CLI@v1
        with:
          inlineScript: |
            echo "Deployment complete!"
            echo "Backend API URL: ${{ env.BACKEND_URL }}"
            echo "Frontend URL: ${{ env.FRONTEND_URL }}"
            if [ ! -z "${{ env.HAPI_FHIR_URL }}" ]; then
              echo "HAPI FHIR URL: ${{ env.HAPI_FHIR_URL }}"
            fi